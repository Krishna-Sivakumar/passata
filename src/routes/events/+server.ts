import type { RequestHandler } from "@sveltejs/kit";
import { Emitter, produce } from "sveltekit-sse";
import type { LogEvent, TimestampedLogs } from "$lib/structs";
import { database, insertLog, fetchRows, findLogs } from "$lib/db";
import { uuid } from "$lib/uuid";

// used to measure the RTT for corrections
export const GET: RequestHandler = async () => {
  return new Response(`${Date.now()}`);
};

const visitors: Record<
  string,
  {
    token: string;
    last_timestamp: number;
    emit: Emitter;
  }
> = {};

async function update(token: string) {
  for (const key in visitors) {
    const visitor = visitors[key];
    if (token !== visitor.token) {
      continue;
    }
    // If this master client has no logs, send them all out right now.
    // Else send only stuff generated by other master clients.
    let logs = await findLogs(visitor.token, visitor.last_timestamp);
    if (logs.length > 0) {
      visitor.last_timestamp = logs[0].timestamp;
    } else {
      return;
    }

    // console.log(logs.length, "sending updates to", connection.slice(0, 10))

    let response: TimestampedLogs = {
      logs: logs.map((item) => JSON.parse(item.log)),
      responseTimestamp: Date.now(),
    };
    const { error } = visitor.emit("update", JSON.stringify(response));
    // console.log("done sending")
    if (error) {
      return;
    }
  }
}

export const POST: RequestHandler = async ({ url }) => {
  const id = uuid();
  return produce(
    async function start({ emit }) {
      const token = url.searchParams.get("token");
      const connection = url.searchParams.get("connectionToken");
      if (token && connection) {
        visitors[id] = { token, emit, last_timestamp: -1 };
      }
    },
    {
      stop() {
        if (visitors[id]) {
          delete visitors[id];
        }
      },
    },
  );
};

// we're using the PUT method since the POST method is reserved for Server-Sent-Event responses
export const PUT: RequestHandler = async ({ request, url }) => {
  // TODO replace token with connectionToken and remove references involving just token
  let event: LogEvent = await request.json();
  event.realTimestamp = Date.now(); // every timestamp is pegged to the server's time
  let token = url.searchParams.get("token");
  let connection = url.searchParams.get("connectionToken");
  if (token && connection) {
    await insertLog(token, event, connection);

    // Update all other clients with this token.
    await update(token);

    return new Response(JSON.stringify(event), {
      headers: {
        "Content-Type": "text/event-stream",
      },
    });
  } else {
    throw new Error("token invalid.");
  }
};
